var Foo = Class({
	Base: Class.Serializable,
	Store: Class.Remote('/rest/foo/?:_id'),
	
	name: ''
});


UTest({
	$config: {
		'http.include': [
			'test/dom/crud-model.js'
		]
	},
	
	'save': function(done){
		new Foo({name: 'test-foo'})
			.save()
			.done(function(foo){
				is_(foo._id, 'String');
				done(foo);
			})
			.fail(assert.avoid('save fail'))
			;
	},
	
	'fetch': function(done, foo){
		Foo
			.fetch({
				_id: foo._id
			})
			.fail(assert.avoid('fetch fail'))
			.done(function(foo){
				
				eq_(foo.name, 'test-foo');
				done(foo);
			})
	},
	
	'patch': function(done, foo){
		
		foo
			.patch({
				$set: {
					'name': 'test-foo-patched'
				}
			})
			.fail(assert.avoid('patch fail', function(error){
				debugger
			}))
			.done(function(foo){
				debugger
				eq_(foo.name, 'test-foo-patched');
				done(foo);
			})
	},
	'patched fetch': function(done, foo){
		Foo
			.fetch({_id: foo._id})
			.fail(assert.avoid('fetch fail after patch'))
			.done(function(foo){
				
				eq_(foo.name, 'test-foo-patched');
				done(foo);
			})
			;
	},
	
	'delete': function(done, foo){
		
		foo
			.del()
			.fail(assert.avoid('delete fail'))
			.done(function(){
				done();
			})
	},
	
	'help': function(done){
		
		UTest
			.server
			.request('/rest/foo?help', function(error, json){
				eq_(error, null);
				
				has_(json, [
					{
						method: 'GET',
						path: '/foo/:id'
					},
					{
						method: 'POST',
						path: '/foo'
					},
					{
						method: 'PUT',
						path: '/foo/:id'
					},
					{
						method: 'PATCH',
						path: '/foo/:id'
					}
				]);
				
				done();
			})
			
	}
})