
var Foo = Class({
	Base: Class.Serializable,
	Store: Class.Remote('/rest/foo/?:_id'),
	
	name: ''
});

var Foos = Class.Collection(Foo, {
	Base: Class.Serializable,
	Store: Class.Remote('/rest/foos'),
});

UTest({
	$config: {
		'http.eval': function(){
			
			var Foo = Class({
				Base: Class.Serializable,
				Store: Class.MongoStore.Single('foos'),
				
				_id: null,
				name: ''
			});
			
			var Foos = Class.Collection(Foo, {
				Base: Class.Serializable,
				Store: Class.MongoStore.Collection('foos')
			});
			
			var endpoints_Single = atma.server.HttpCrudEndpoints.Single(
				'foo', Foo
			);
			var endpoints_Collection = atma.server.HttpCrudEndpoints.Collection(
				'foos', Foos
			);
			
			var FooService = atma
				.server
				.HttpService(endpoints_Single, endpoints_Collection)
				;
			
			atma
				.server
				.app
				.handlers
				.registerService('^/rest/', FooService);
		}
	},
	
	'save': function(done){
		new Foo({name: 'test-foo'})
			.save()
			.done(function(foo){
				is_(foo._id, 'String');
				done(foo);
			})
			.fail(assert.avoid('save fail'))
			;
	},
	
	'fetch': function(done, foo){
		Foo
			.fetch({
				_id: foo._id
			})
			.fail(assert.avoid('fetch fail'))
			.done(function(foo){
				
				eq_(foo.name, 'test-foo');
				done(foo);
			})
	},
	
	'fetch collection': function(done, foo){
		Foos
			.fetch()
			.fail(assert.avoid('fetch collection fail'))
			.done(function(foos){
				is_(foos.length, 'Number');
				notEq_(foos.length, 0);
				
				done(foo);
			});
	},
	
	'patch': function(done, foo){
		
		foo
			.patch({
				$set: {
					'name': 'test-foo-patched'
				}
			})
			.fail(assert.avoid('patch fail'))
			.done(function(foo){
				eq_(foo.name, 'test-foo-patched');
				done(foo);
			})
	},
	'patched fetch': function(done, foo){
		Foo
			.fetch({_id: foo._id})
			.fail(assert.avoid('fetch fail after patch'))
			.done(function(foo){
				
				eq_(foo.name, 'test-foo-patched');
				done(foo);
			})
			;
	},
	
	'delete': function(done, foo){
		
		foo
			.del()
			.fail(assert.avoid('delete fail'))
			.done(function(){
				done();
			})
	},
	
	'help': function(done){
		
		UTest
			.server
			.request('/rest/foo?help', function(error, json){
				eq_(error, null);
				
				has_(json, [
					{
						method: 'GET',
						path: '/foo/:id'
					},
					{
						method: 'POST',
						path: '/foo'
					},
					{
						method: 'PUT',
						path: '/foo/:id',
						arguments: {
							'?_id': null,
							'?name': 'string'
						}
					},
					{
						method: 'PATCH',
						path: '/foo/:id'
					}
				]);
				
				done();
			})
			
	}
})