UTest({
	$config: {
		'http.eval': function(){
			atma
				.server
				.app
				.handlers
				.registerService('^/reject', atma.server.HttpService({
					'/string': function(){
						this.reject('String reject');
					},
					'/native': function(){
						this.reject(new TypeError('Native reject'));
					},
					'/http': function(){
						this.reject(atma.server.HttpError('Http reject'));
					},
					'/object': function(){
						this.reject({ error: 'FooError', baz: 'Lorem' });
					}
				}));
		}
	},
	
	'string error': function(done){
		UTest
			.server
			.request('/reject/string')
			.done(assert.avoid())
			.fail(toJSOND(function(error){
				eq_(error.error, 'String reject');
				deepEq_(Object.keys(error), ['error', 'code']);
				done();
			}))
	},
	'native error': function(done){
		UTest
			.server
			.request('/reject/native')
			.done(assert.avoid())
			.fail(toJSOND(function(error){


				eq_(error.code, 500);
				eq_(error.error, 'TypeError: Native reject');
				

				deepEq_(Object.keys(error), ['error', 'code']);
				done();
			}))
	},
	'http error': function(done){
		UTest
			.server
			.request('/reject/http')
			.done(assert.avoid())
			.fail(toJSOND(function(error, code){

				eq_(error.code, 500);	
				eq_(error.error, 'HttpError: Http reject');
				deepEq_(Object.keys(error), ['error', 'code']);
				done();
			}))
	},
	'object error': function(done){
		UTest
			.server
			.request('/reject/object')
			.done(assert.avoid())
			.fail(toJSOND(function(error, code){
				
				deepEq_(error, {
					error: 'FooError',
					baz: 'Lorem'
				});	
				done();
			}))
	}
})

function toJSON(xhr){
	try {
		return JSON.parse(xhr.responseText);
	} catch(error) {
		console.error('>parse error', error);

		return {};
	}
}

function toJSOND(fn){
	return function(xhr){
		return fn(toJSON(xhr), xhr.statusCode);
	}
}