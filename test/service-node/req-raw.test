
include
	.inject('/lib/server.js')
	.done(function(resp){
		
				
		var FooService = atma.server.HttpService({
			'$get /': function(){
				this.resolve('I GET Service', 304)
			},
			'$post /baz': {
				meta: {
					description: 'Baz Helper',
					arguments: {
						bazValue: 'string'
					}
				},
				process: [
					function (req) {
						this.resolve('POST:' + req.body.bazValue)
					}
				]
			}
		});
		
		var app;
		UTest({
			'$before': function(done){
				atma
					.server
					.Application({
						configs: null,
						config: { debug: true }
					})
					.done(function(app_){
						app = app_;
						app
							.handlers
							.registerService('^/foo', FooService)
							;
						done();
					})
			},
			'get': function(done){
				app
					.execute('/foo', 'get')
					.fail(assert.avoid())
					.done(function(content, statusCode){
						eq_(statusCode, 304);
						eq_(content, 'I GET Service');
					})
					.always(done);
			},
			'post': function(done){
				app
					.execute('/foo/baz', 'post', { bazValue: 'bazzy' })
					.fail(assert.avoid())
					.done(function(content, statusCode){
						eq_(statusCode, 200);
						eq_(content, 'POST:bazzy');
					})
					.always(done);
			},
			'post - invalid': function(done){
				app
					.execute('/foo/baz', 'post', { bazValue: 10 })
					.done(assert.avoid())
					.fail(function(error, statusCode){
						eq_(statusCode, 400);
						has_(error, {
							name: 'RequestError',
							message: 'Invalid type. Expect: string Property: bazValue'
						});
					})
					.always(done);
			}
		})
	})
